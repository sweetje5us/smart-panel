import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';
import ip from "../ip.json";
import { useNotifications } from '../../contexts/NotificationContext';
import NotificationService from '../../services/NotificationService';
import './TasksWidget.css';

const address = `http://${ip.ip}:${ip.port}`;

const TasksWidget = () => {
    const { updateNotificationCount } = useNotifications();
    const [tasks, setTasks] = useState([]);
    const [loading, setLoading] = useState(true);
    const [previousTasks, setPreviousTasks] = useState([]);
    const [isFirstLoad, setIsFirstLoad] = useState(true);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    const currentUser = JSON.parse(localStorage.getItem('user')) || {};
    const currentUserName = currentUser.name || '';

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    const sendNotificationToAPI = async (title, taskId) => {
        try {
            const currentDate = new Date();
            const formattedDate = currentDate.toISOString().split('T')[0];
            const formattedTime = currentDate.toTimeString().split(' ')[0].substring(0, 5);
            const taskLink = taskId ? `http://${address}/tasks/${taskId}` : `http://${address}/tasks`;
            
            await NotificationService.createNotification({
                title: title,
                message: title,
                type: 'info',
                source: 'tasks',
                date: formattedDate,
                time: formattedTime,
                link: taskLink
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            updateNotificationCount();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    const checkNewTasks = (newTasks) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (isFirstLoad) {
            setIsFirstLoad(false);
            setPreviousTasks(newTasks);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        const newAssignedTasks = newTasks.filter(task => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–æ–≤–æ–π
            const isNewTask = !previousTasks.some(prevTask => prevTask.task_id === task.task_id);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const isAssignedToCurrentUser = task.assignee === currentUserName;
            
            return isNewTask && isAssignedToCurrentUser;
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        newAssignedTasks.forEach(task => {
            const title = `–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${task.name}`;
            sendNotificationToAPI(title, task.task_id);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á
        setPreviousTasks(newTasks);
    };

    const getPriorityIcon = (priority) => {
        switch (priority) {
            case 'Critical':
                return 'üî¥';
            case 'High':
                return 'üü†';
            case 'Medium':
                return 'üü°';
            case 'Low':
                return 'üü¢';
            case 'Blocked':
                return '‚ö´';
            default:
                return '‚ö™';
        }
    };

    const fetchTasks = async () => {
        try {
            const response = await fetch(`${address}/api/tasks`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á –≤ –º–∞—Å—Å–∏–≤ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            const allTasks = Array.isArray(data) ? data : Object.values(data).flat();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userTasks = allTasks.filter(task => 
                (task.status === 'To do' || task.status === 'In Progress') &&
                task.assignee === currentUserName
            );
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            const sortedTasks = userTasks.sort((a, b) => {
                const priorityOrder = {
                    'Blocked': 0,
                    'Critical': 1,
                    'High': 2,
                    'Medium': 3,
                    'Low': 4
                };
                return priorityOrder[a.priority] - priorityOrder[b.priority];
            });
            
            checkNewTasks(sortedTasks);
            setTasks(sortedTasks);
            setLoading(false);
        } catch (error) {
            console.error('Error fetching tasks:', error);
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchTasks();
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        const interval = setInterval(fetchTasks, 120000);
        return () => clearInterval(interval);
    }, []);

    if (loading) {
        return (
            <div className="tasks-widget">
                <div className="tasks-widget-header">
                    <h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
                </div>
                <div className="tasks-widget-content loading">
                    –ó–∞–≥—Ä—É–∑–∫–∞...
                </div>
            </div>
        );
    }

    return (
        <div className="tasks-widget">
            <div className="tasks-widget-header">
                <h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
                <Link to="/tasks" className="view-all-link">
                    –í—Å–µ –∑–∞–¥–∞—á–∏
                </Link>
            </div>
            <div className="tasks-widget-content">
                {tasks.length === 0 ? (
                    <div className="no-tasks">
                        –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                    </div>
                ) : (
                    <div className="tasks-list">
                        {tasks.map(task => (
                            <Link to={`/tasks/${task.task_id}`} key={task.task_id} className="task-item">
                                <div className="task-item-header">
                                    <span className="task-priority">
                                        {getPriorityIcon(task.priority)}
                                    </span>
                                    <span className="task-status" data-status={task.status}>
                                        {task.status === 'To do' ? '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é' : '–í —Ä–∞–±–æ—Ç–µ'}
                                    </span>
                                </div>
                                <div className="task-item-title">
                                    {task.name}
                                </div>
                                {task.description && (
                                    <div className="task-item-description">
                                        {task.description}
                                    </div>
                                )}
                            </Link>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
};

export default TasksWidget;