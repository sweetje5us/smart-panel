import React, { useState, useRef } from 'react';
import axios from 'axios';
import Modal from 'react-modal';
import ReactPlayer from 'react-player';
import Button from '@mui/material/Button';

import ip from '../ip.json';


// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
Modal.setAppElement('#root');



const getToken = async () => {
  try {
    const response = await axios.get(`http://${ip.ip}:${ip.port}/api/streamertoken`, {
      
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const streamerToken = response.data.token;
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', streamerToken);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return streamerToken;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  }
};

// –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const customStyles = {
  content: {
    top: '50%',
    left: '50%',
    right: 'auto',
    bottom: 'auto',
    transform: 'translate(-50%, -50%)',
    width: '80%', // –®–∏—Ä–∏–Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    maxWidth: '600px', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    padding: '20px', // –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  },
  overlay: {
    backgroundColor: 'rgba(0, 0, 0, 0.75)', // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
  },
};

const KanbanWidget = () => {
  const [modalIsOpen, setModalIsOpen] = useState(false);
  const [source, setSource] = useState('iPad');
  const [videoUrl, setVideoUrl] = useState('');
  const [streamerToken, setStreamerToken] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const videoRef = useRef(null);
  const wsRef = useRef(null);
  const mediaSourceRef = useRef(null);
  const sourceBufferRef = useRef(null);
  const isAppending = useRef(false);
  const dataQueue = useRef([]);

  const appendData = (data) => {
    if (data.byteLength === 0) return;
  
    if (isAppending.current) {
      dataQueue.current.push(data);
      return;
    }
  
    isAppending.current = true;
  
    if (!sourceBufferRef.current || sourceBufferRef.current.updating || mediaSourceRef.current.readyState !== 'open') {
      dataQueue.current.push(data);
      isAppending.current = false;
      return;
    }
  
    try {
      
      sourceBufferRef.current.appendBuffer(data);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ SourceBuffer:', e);
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ SourceBuffer: ' + (e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      isAppending.current = false;
    }
  };
  
  
  const openWebSocket = async () => {
    try {
      const token = await getToken(); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      setStreamerToken(token);
      const wsUrl = `wss://live-vdk4.camera.rt.ru/stream/004acf75-a06b-4731-8949-ef801caa3412/${Math.floor(Date.now() / 1000)}.mp4?mp4-fragment-length=0.5&mp4-use-speed=0&mp4-afiller=1&token=${token}`;
  
      const ws = new WebSocket(wsUrl);
      ws.binaryType = 'arraybuffer';
      wsRef.current = ws;
  
      ws.onopen = () => {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');
        // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
        if (videoRef.current) {
          videoRef.current.play();
        }
      };
  
      ws.onclose = (event) => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', event);
        setErrorMessage('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ' + event.reason);
      };
  
      ws.onerror = (event) => {
        console.error('–û—à–∏–±–∫–∞ WebSocket:', event);
        setErrorMessage('–û—à–∏–±–∫–∞ WebSocket: ' + JSON.stringify(event));;
      };
  
      const mediaSource = new MediaSource();
      mediaSourceRef.current = mediaSource;
  
      if (videoRef.current) {
        videoRef.current.src = URL.createObjectURL(mediaSource);
      }
  
      mediaSource.addEventListener('sourceopen', () => {
        try {
          const sourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs="avc1.42E01E, mp4a.40.2"');
          sourceBufferRef.current = sourceBuffer;
  
          sourceBuffer.addEventListener('updateend', () => {
            isAppending.current = false;
            if (dataQueue.current.length > 0) {
              appendData(dataQueue.current.shift());
            }
          });
  
          ws.onmessage = (event) => {
           
            const byteArray = new Uint8Array(event.data);

  appendData(byteArray);
          };
  
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ SourceBuffer:', e);
          setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ SourceBuffer: ' + (e.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
      });
  
      return () => {
        ws.close();
        if (mediaSourceRef.current && mediaSourceRef.current.readyState === 'open') {
          mediaSourceRef.current.endOfStream();
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ WebSocket:', error);
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ WebSocket: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  const timestamp = Math.floor(Date.now() / 1000);

  const toggleSource = () => {
    if (source === 'PC') {
      setSource('iPad');
      setVideoUrl(`wss://live-vdk4.camera.rt.ru/stream/004acf75-a06b-4731-8949-ef801caa3412/${timestamp}.mp4?mp4-fragment-length=0.5&mp4-use-speed=0&mp4-afiller=1&token=${streamerToken}`);
      openWebSocket(); // URL –¥–ª—è iPad
    } else {
      setSource('PC');
      setVideoUrl(`https://live-vdk4.camera.rt.ru/stream/004acf75-a06b-4731-8949-ef801caa3412/live.mp4?mp4-fragment-length=0.5&mp4-use-speed=0&mp4-afiller=1&token=${streamerToken}`);
      if (videoRef.current) {
        videoRef.current.src = videoUrl; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP URL –¥–ª—è PC
      }
    }
  };

  const openModal = async () => {
    try {
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω...');
      const token = await getToken();
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', token);
      
      if (!token) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.');
      }
  
      setStreamerToken(token);
      setVideoUrl(`https://live-vdk4.camera.rt.ru/stream/004acf75-a06b-4731-8949-ef801caa3412/live.mp4?mp4-fragment-length=0.5&mp4-use-speed=0&mp4-afiller=1&token=${token}`);
      setModalIsOpen(true);
      if (source === 'iPad') {
        openWebSocket();
      }
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', error.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
    }
  };

  const closeModal = () => setModalIsOpen(false);


  const openDoor = async () => {
    try {
      const response = await axios.post('https://household.key.rt.ru/api/v2/app/devices/25575/open', null, {
        headers: {
          'Accept': 'application/json, text/plain, */*',
          'Accept-Language': 'ru',
          'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzpiNGE4NjgwNC04NDhiLTQzYWQtYmY3Ny01MjI0M2MzZTNhNDEiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOltdLCJjbGllbnRfaWQiOiJiV0Z6ZEdWeU9qYzRPVFUyTmpveE9USTRNRGswT2pFMk56QTZOVFV3T1RjNk16b3hOanBRUTNWWFpHRmpTV3h0VDBjcmRpdG1OekEwYzA4MVVtaGtNblpLV21reFRFNTNURkZ1UnprMk56aFpQUT09IiwiZXhwIjoxNzU2MDQ1OTU4LCJleHQiOnt9LCJpYXQiOjE3MjQ1MDk5NTgsImlzcyI6Imh0dHBzOi8vb2F1dGgyLmtleS5ydC5ydS8iLCJqdGkiOiJhNjY4YjkyMi01Y2YzLTQwNWQtOGViOS04NmE1OWU1M2ZhODkiLCJuYmYiOjE3MjQ1MDk5NTgsInNjcCI6W10sInN1YiI6ImJXRnpkR1Z5T2pjNE9UVTJOam94T1RJNE1EazBPakUyTnpBNk5UVXdPVGM2TXpveE5qcFFRM1ZYWkdGalNXeHRUMGNyZGl0bU56QTBjMDgxVW1oa01uWktXbWt4VEU1M1RGRnVSemsyTnpoWlBRPT0ifQ.nOj2EZ3ZBYdd4TPuoXPx3WZOqwYgmWBCu6go_vaB1rahvh5seseI-RlvzaiLDG8YTsCVJuUTsnNjm8xCTv6_JZyR77yE4Fk0w9l3GUP6LfsH6DYqmArP9Dk7dpkiqQAMAIv3aryee6GxsB_0vZKTJ9ud0qel46f8VsE4vl34okdUvBMpSvvIpwEwKJMoDp0oa6wVZN5k118vUURjsuIxvLd3d9fvD2izpDUkKwRKNE3tPSEAxD_huAYQLWk5zcqJh_yC8D_DSPNCzRM_9wtWebxyUVmFIILq_3KYIU7c6vVf7alea0yJlf6onK_zD-FOKytUCIa1YcYmxBQJ3RM0RHgI5KzbAOZmqzg49O4VzVNrh1sBrjPiKajmhmBZ8wIyoftBlnDeytwdTJOUDv80Tykw03FqaFAO5XaYfDPSatAP7Qti8x3M3fiJ92IFVj-e8xFdHpExCB3B8OItsh2gOkg2XWpG0n0prvfo2T-5NpKu8oRIoGOSIzvAJ-tB5PasTI1vGT1G_-mGJBHFElqBg6cIDNCIuAggBpE7xUB2nQQ1Bdm_SAzkgjTyj-dJl6s8aSfkKCoXhvmGIQWY1dF7KeL_hAkwr_vJK5e76dUfanFnqn8MO3E4YkvaIVAH-aF8nwRER-c20weP7kCTSNFg3kYFuY9qZxPLIs0OorH1Krg', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
          'Content-Length': '0',
        },
      });

      if (response.status === 200) {
        alert('–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞! üö™');
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏:', error);
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  return (
    <div>
      <Button  aria-haspopup="true"
      
      variant="contained"
      disableElevation onClick={openModal}>–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ–¥–æ–º–æ—Ñ–æ–Ω</Button>
      
      <Modal
        isOpen={modalIsOpen}
        onRequestClose={closeModal}
        contentLabel="–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
        style={customStyles} // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
      >
        <h2>–í–∏–¥–µ–æ–ø–ª–µ–µ—Ä</h2>
        <video ref={videoRef} controls style={{ width: '100%', height: 'auto' }} />
        
        <Button   id="demo-customized-button"
     
        aria-haspopup="true"
      
        variant="contained"
        disableElevation onClick={openDoor}>–û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å</Button>
        <Button  aria-haspopup="true"
      
      variant="contained"
      disableElevation onClick={closeModal}>–ó–∞–∫—Ä—ã—Ç—å</Button>
      </Modal>
    </div>
  );
};

export default KanbanWidget;